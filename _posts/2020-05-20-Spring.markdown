---
layout: post
title:  "Spring学习笔记"
date:   2020年5月22日 10点33分        
categories: me
tags: Java
excerpt: Spring IOC AOP
mathjax: true
author: Sky
---

* content
{:toc}


# Spring

## Spring 相关概念

- 开源、轻量级框架

- 核心：

  1. AOP：面向切面

     扩展代码不是修改代码实现

  2. IOC：控制反转

     对象交给Spring配置创建

- JavaEE一站式

  三层结构中每一层提供不同的解决技术

  1. web层：SpringMVC
  2. service层：Spring的IOC
  3. dao层：Spring的jdbcTemplate

## IOC

> 把对象的创建交给Spring进行管理

### 底层原理

- 底层使用的技术
  1. xml配置文件
  2. dom4j解析xml
  3. 工厂设计模式
  4. 反射

- 发展过程：

  1）原来的方式:

  ~~~java
  public class User{
      public void add(){
          //......
      }
  }
  
  //在servlet钟如果要使用User类的方法
  public class Servlet{
      User user = new User();
      user.add();
  }
  
  ####存在问题（耦合度）：User 的方法修改了名字，Servlet也要修改####
  ~~~

  2）使用工厂模式解耦合

  ~~~~java
  public class UserService{
      public void add(){
          //......
      }
  }
  
  //在servlet钟如果要使用User类的方法
  public class UserServlet{
      UserService  s = Factory.getService();
      s.add();   
  }
  
  
  //解决方法：创建工厂类
  public class Factory{
      //提供返回UserSercive对象的方法
      public static UserService getService(){
          return new UserService();
      }
  }
  ####仍存在工厂给和servlet的耦合：工厂里仍要new
  ~~~~

  #### 3）IOC：高内聚、低耦合

  ~~~java
  public class UserService{
      public void add(){
          ......
      }
  }
  
  public class UserServlet{
      //直接调用factory的静态方法：实现在下一节 
      //不用再new了
      UserFactory.getService();
  }
  ~~~

  ### 实现过程

  一、创建xml配置文件

  ~~~xml
  <bean id="userService" class="类路径（com.it.UserService）">
  ~~~

  二、创建工厂类+使用dom4j解析配置文件+反射

  ~~~java
  public class UserFactory{
      //提供返回UserSercive对象的方法
      public static UserService getService(){
          //1.使用dom4j解析xml
          //根据id值得到class路径
          String classValue = "class属性值";
          //2.使用反射创建类的对象
          Class clazz = CLass.forName(classValue);
          UserService s = clazz.newIntance();
          return s;
      }
  }
  ~~~

  三、IOC接口

  （1）BeanFactory：IOC容器的基本实现。

  （2）ApplicationContext：BeanFactory的子接口，提供更强大的功能。

  **主要区别：**
  
  （1）加载配置文件的时候，BeanFactory不会创建对象，在获取时（使用）才去创建；
  
  （2）ApplicationContext则在加载配置文件时就会创建对象。
  
  哪个更适合使用：
  
  ​	**ApplicationContext**！！
  
  虽然加载就创建对象显得耗时耗资源，但是加载可以交给服务器，启动时就加载好，反而节省了运行过程中的时间和资源。
  
  
  
  **ApplicationContext**接口的实现类
  
  (1) FileSystemXmlApplicationContext：文件系统路径，c://cdsda
  
  (2) ClassPathXmlApplicationContext：类路径
  
  
  
  
  
  **补充：**
  
  **源码阅读**
  
  

### 配置文件方式：创建



1）默认构造函数创建（最常用）

~~~xml
<!--引入约束内容——>
<bean id="userService" class="类路径（com.it.UserService）"></bean>
~~~

> 这种xml配置方法，使用的是默认的无参构造，没有无参构造函数获取Bean时会报错。

~~~java
public void testUser(){
    //1.加载Spring配置文件并创建配置内容对象					 //src/bean.xml
    ApplicationContext context = new ClassPathXmlApplicationContext("bean.xml");
   
    //2.得到配置中想要的对象
    User user = (User) context.getBean("user");//id
    //
    user.add();
}
~~~

2）静态工厂

~~~xml
<!--引入约束内容——>
<bean id="bean2" class="工厂类的路径（com.it.Bean2Factory）" factory-method="getBean2"/></bean>
~~~

工厂类

~~~java
public class Bean2Factory{
    //静态方法，返回Bean2对象
    public static Bean2 getBean2(){
        return new Bean2();
    }
}
~~~

~~~java
public void testBean2(){
    //1.加载Spring配置文件并创建配置内容对象
    ApplicationContext context = new ClassPathXmlApplicationContext("bean.xml");//s
    rc/bean.xml
    //2.得到配置中想要的对象
    Bean2 bena2= (Bean2) context.getBean("bean2");//id
    
}
~~~

3）实例工厂（实例方法）

配置文件中，再加上工厂对象









#### Bean标签的常用属性

1. id：起的名字。引用时id

   使用中根据id值配置对象

2. class：创建对象的类的全路径

   

3. name：同id，但可以包含符号，遗留问题，之前有框架用name

   忽略吧

4. scope：Bean的作用范围

   ​	**singleton：单例**；加载时就创建单例

   ​	**prototype：多例**：get时创建

   request

   session

   globalSession





### 配置文件方式：Bean属性注入

1. 不用框架

   不用Spring，可以使用    `有参构造`  、 `set方法`、`接口注入(略)`

2. Spring框架

   1）set方法（常用）

   > 有set方法后，可以读取xml文件，创建类时并注入property属性值

   Book类

   ~~~java
   class Book{
       private String bookName；
       set();//简略版 
       
   }
   ~~~

   测试

   ~~~java
   public void testBean2(){
       //1.加载Spring配置文件并创建配置内容对象
       ApplicationContext context = new ClassPathXmlApplicationContext("bean.xml");
       //2.得到配置中想要的对象
       Book book= (Book) context.getBean("book");//id
       syso(book.bookName);//新华字典
   }
   ~~~

   bean.xml：

   ~~~xml
   <bean id="book" class="">
       <!-- name：类中定义的属性的名称
    		 value:设置的属性值
   	-->
       <property name="bookName" value="新华字典"></property>
   </bean>
   ~~~

   2）有参构造注入

   xml：

   ~~~xml
   <bean id="userService" class="类路径（com.it.UserService）">
       <constructor-arg name="username" value= "小王"></constructor-arg>
   </bean>
   ~~~

3. **实际使用：set方法-注入对象**

   > service中使用dao对象

    Service类

   ~~~java
   public class UserService{
       //UserDao userDao = new UserDao();
       
       //1.定义dao对象属性
       private UserDao userDao;
       //2.生成属性set方法
       public void setUserDao(UserDao userDao){
           this.userDao = userDao;
       }
       
       
       public void add(){
           //使用
           userDao.add();
       }
   }
   ~~~

   Dao类

   ~~~Java
   public class UserDao{
       
      add(){
          
      }
       
   }
   ~~~

   xml

   ~~~xml
   <bean id="userService" class="x.x.UserService">
        <!--注入Dao对象
    		 name：类中定义的属性的名称
    		 ref：引用：应与bean-id相同
   	-->
       <property name="userDao" ref="userDao"></property>
   </bean>
   
   <bean id="userDao" class="x.x.UserDao"></bean>
   ~~~

   测试

   ~~~java
   public void testBean2(){
       //1.加载Spring配置文件并创建配置内容对象
       ApplicationContext context = new ClassPathXmlApplicationContext("bean.xml");
       //2.得到配置中想要的对象
       UserService sk = (UserService) context.getBean("userService");//id
       sk.add();
       
   }
   ~~~

   

   



### IOC和DI区别

IOC：控制反转

DI：依赖注入



把加载配置文件和创建对象的过程，在服务器启动时就完成

    //1.加载Spring配置文件并创建配置内容对象
    ApplicationContext context = new ClassPathXmlApplicationContext("bean.xml");

### FactoryBean

不同于普通bean，可以返回其他类型的bean

实现FactoryBean<>接口，重写getObject

~~~java
public interface FactoryBean<T> {

    //返回的对象实例
    T getObject() throws Exception;
    //Bean的类型
    Class<?> getObjectType();
    //true是单例，false是非单例  在Spring5.0中此方法利用了JDK1.8的新特性变成了default方法，返回true
    boolean isSingleton();
}
~~~

具体使用略



### 生命周期

过程

​	1）通过构造器创建Bean实例（默认无参构造）

​	2）bean属性注入和其他bean的引用（调用set方法）

​	3）调用bean的初始化方法——xml中指定 init-method = “自定义的方法”

​		可使用（获得了）

​	4）容器关闭，调用销毁的方法——destroy-method = “  ”，并在使用时手动  bean.close()



实现接口BeanPostProcessor后，初始化前后有前置后置+2.此外xml中还需配置后置处理器的bean对象，为配置文件中的所有bean对象都配置上了

~~~java
public class MyBeanPost implements BeanPostProcessor{
    @Override
    public Object postProcessBeforeInitialization(Object bean, String beanName) throws BeanException{
        System.out.println("初始化之前")
		return bean;
    }

    public Object postProcessAfterInitialization(Object bean, String beanName){

    }   
}


~~~



@Override

postProcessBeforeInitialization()

postProcessAfterInitialization()

~~~xml
<bean id = "myBeanPost" class=""></bean>
~~~





演示






### 注解方式：创建+属性注入

xml：开启注解扫描：对包扫描. 把包上级位置加入，则包含所有包

~~~xml
<!-- 开启注解扫描-->
<context:component-scan base-package="cn.it"></context>
~~~

#### 创建对象

注解：

> ```java
> @Component(value="叫啥") //value可以不写 //相当于xml中加 <bean id="叫啥" class=""></bean>
> 	@Controller	——	web层
> 	@Service	——  业务层
> 	@Repository ——  持久层
> ```

> ~~~java
> @Scope(value="prototype")//多实例
> ~~~



User类

~~~java
@Component("user") //<bean id="user" class=""></bean>
public class User{
   
   add(){
      
   }    
}
~~~

测试

~~~java
@Test
public void test(){
    ApplicationContext context = new ClassPathXmlApplicationContext("bean.xml");
    User user = (User) context.getBean("user");
}
~~~



#### 属性注入

> @AutoWired     --自动注入，且不需要再写set方法
>
> ​	通过类(UserDao)找，跟id没关系

 Service类

~~~java
@Service("userService")
public class UserService{
     
    @AutoWired
    //通过类UserDao 查找
    private UserDao userDao;
   //不需要set方法了
    
    public void add(){
        userDao.add();
    }
}
~~~

Dao类

~~~Java
@Repository("userDao")
public class UserDao{
 
   add(){      
   }    
}
~~~





> @Qualifier(value = "userDao")			需要和@AutoWired  一起使用

 Service类

~~~java
@Service("userService")
public class UserService{
     
    @AutoWired
    @Qualifier(value = "userDao")
    //如上！！！！
    private UserDao userDao;
   
    
    public void add(){
        userDao.add();
    }
}
~~~

Dao类

~~~Java
@Repository("userDao")
public class UserDao{
 
   add(){      
   }    
}
~~~





> @Resource(name="userDao")   --指定对象
>
> @Resource(） --根据类
>
> javax包中，不是spring中的





### Spring Bean管理结合方式

> 创建用配置文件
>
> 属性注入用注解

xml

~~~xml
<bean id="userService" class="类路径（com.it.UserService）"></bean>
<bean id="userDao" class="类路径（com.it.UserDao）"></bean>
~~~

使用

~~~java
class userService{
	@Resource(name="userDao")   
	UserDao userDao;
}
~~~



## AOP

### 概念

面向切面编程

横向抽取机制，取代了纵向继承重复性的代码（性能监视、事务管理、安全检查、缓存）

实现了：扩展功能不修改源代码



### 发展过程

原来：

~~~java
public class User{
    public void add(){
        //。。。
    }
}
~~~

想要扩展：

> 添加数据之后，添加日志功能，记录添加时刻

~~~java
public class User{
    public void add(){
        //
        //扩展功能
    }
}
~~~

纵向解决：没用

> 继承：super.addlog();

aop解决：横向抽取

> 底层：使用动态代理



1. 有接口情况：jdk动态代理

   ~~~java
   public interface Dao{
       public void add(){
       }
   }
   
   public class DaoImpl implements Dao{
       public void add(){
           //添加       
       }
   }
   ~~~

   > 动态代理方式，创建接口实现类代理对象

   创建和DaoLmpl类的平级对象

   实现和这个类相同的功能

   

2. 没有接口：Cglib动态代理

   ~~~java
   public class User{
       public void add(){
           //添加       
       }
   }
   ~~~

   > 动态代理实现思路

   创建User类的子类的代理对象

   在子类里调用父类的方法完成增强

![v2-e777957e808c92fefcbcbec3945a2f91_r](C:\Users\Sty\Pictures\Saved Pictures\v2-e777957e808c92fefcbcbec3945a2f91_r.jpg)

### 术语

> Pointcut 切入点：实际增强的方法 
>
> Advice 增强/通知：扩展的逻辑，添加的功能；通知：前置、后置、异常、最终：后置之后、环绕
>
> Aspect 切面：增强加到具体方法上的过程

Joinpoint 连接点：类里面哪些方法可以增强

Introduction 引介：动态添加方法和属性

Target 目标对象：要增强的类

Weaving 织入：增强用到target的过程 

Proxy 代理：AOP织入增强后，产生了一个结果代理类

~~~java
public class User{
    public void add();
        	update();
    		delete();  
}
~~~



### Spring的AOP操作

> 在Spring里进行aop操作，使用AspectJ框架实现。Spring2.0添加

用AspectJ实现aop的两种方式

- xml配置
- 注解

准备：xml引入约束

#### 目标

想要实现：book的add放大前，要先做前置的内容

~~~java
public class Book{
    public void add();
        	syso("add........")  
}

public class MyBook{
    public void before1(){
        System.out.println("前置增强") ;
    }
    public void after1(){
        System.out.println("后置增强") ;
    }
    
    //环绕通知
     public void around1(ProceedingJoinPoint p){
        System.out.println("方法前");
        p.proceed();
        System.out.println("方法后");
    }
        	 
}

~~~

#### xml配置方式实现

> 使用表达式配置**切入点**(实际增强的方法)

**Execution介绍**

接下来简单的说下execution的语法：
 `execution(注解？修饰符？返回值类型 类型声明？方法名（参数）异常？)`

- **注解**：可选，如要hock注解，则必须添加。例如`execution(@java.lang.Override * *(..))`
- **修饰符**：可选，如public，protected，写在返回值前；
- **返回值类型**：必选，可以使用 * 来代表任意返回值；
- **类型声明**：可选，可以是任意类型；
- **方法名**：必选，可以用*来代表任意方法；
- **参数**：()代表是没有参数，(..)代表是匹配任意数量，任意类型的参数，当然也可以指定类型的参数进行匹配，如要接受一个String类型的参数，则(java.lang.String)；任意数量的String类型参数：(java.lang.String..)；第一个是任意类型，第二个是String的参数匹配：(*,java.lang.String)等等；
- **异常**：可选，语法："throws 任意异常类型"，可以是多个，用逗号分隔，例如：throws java.lang.IllegalArgumentException, java.lang.ArrayIndexOutOfBoundsException。
   注意：**以上所有的类都需要是全类名写入，不能简写**
- **常用**

~~~java
1.execution(* cn.it.Book.add(..))
2.execution(* cn.it.Book.*(..))
3.execution(* *.*(..))

~~~

**xml配置**

~~~xml
<!-- 1 配置对象 -->
<bean id="book" class="类路径（com.it.Book）"></bean>
<bean id="mybook" class="类路径（com.it.Mybook）"></bean>

<!-- 2 配置aop -->  
<aop:config>
	<!-- 2.1 配置切入点（表达式） --> 
    <aop:pointcut expression="execution(* cn.it.Book.add(..))" id="pointcut1"/>
    
    <!-- 2.2 配置切面（增强→切入点） -->  
    <aop:aspect ref="mybook">
        <!-- 配置增强类、增强、切入点 -->
        <aop:before method="before1" pointcut-ref="pointcut1"/>
        
        <aop:after-returning method="after1" pointcut-ref="pointcut1"/>
        
        <aop:around method="around1" pointcut-ref="pointcut1"/>
    </aop:aspect>
</aop:config>
~~~

试一下

~~~java
@Test
public void test(){
    ApplicationContext context = new ClassPathXmlApplicationContext("bean.xml");
    Book book = (Book) context.getBean("book");
    book.add();
}
//前置增强
//方法前
//add........
//方法后
//后置增强
~~~

#### 注解实现

xml

~~~xml
<!-- 开启aop -->
 <aop:aspectj-autoproxy></aop:aspectj-autoproxy>

<!-- 创建对象 -->
<bean id="book" class="类路径（com.it.Book）"></bean>
<bean id="mybook" class="类路径（com.it.Mybook）"></bean>
~~~



增强类+两个注解

> @Aspect  		//切面
>
> @Before(表达式)

~~~java

//public class Book{
//    public void add();
//        	System.out.println("add........")  
//}

//增强类
@Aspect
public class MyBook{
    @Before(value="execution(* cn.it.Book.add(..))")
    public void before1(){
        System.out.println("前置增强") ;
    }
    
        	 
}
~~~



补充：相同切入点抽取（公共表达式）

@Pointcut(value = "表达式")

~~~java
@Pointcut(value = "execution(* cn.it.Book.add(..))")//
public method(){
    
}


@Aspect
public class MyBook{
    @Before(value="method()")//
    public void before1(){
        System.out.println("前置增强") ;
    }
}        	
~~~



## Spring对不同的持久化支持

Spring为各种支持的持久化技术，都提供了简单操作的模板和回调

| ORM持久化技术   | 模板类                                               |
| --------------- | ---------------------------------------------------- |
| JDBC            | org.springframework.jdbc.core.JdbcTemplate           |
| Hibernate5.0    | org.springframework.orm.hibernate5.HibernateTemplate |
| IBatis(MyBatis) | org.springframework.orm.ibatis.SqlMapClientTemplate  |
| JPA             | org.springfrmaework.orm.jpa.JpaTemplate              |



JdbcTemplate

1.配置连接池

xml

~~~xml
<!-- 配置C3P0连接池 -->
<bean id="dataSource" class="com.jolbox.bonecp.BoneCPDataSource" destroy-method="close">  
        <property name="driverClass" value="com.mysql.jdbc.Driver" />  
        <property name="jdbcUrl" value="jdbc:mysql://106.15.200.190:3306/test?useUnicode=true&characterEncoding=UTF-8" />  
        <property name="username" value="root" />  
        <property name="password" value="root" />   
    </bean> 
~~~

2.Dao层使用jdbcTemplate

service 对象注入dao对象

dao 对象注入 jdbcTemplate对象

 jdbcTemplate对象注入dataSource属性



### 事务

####  **什么是事务？**

- 事务是逻辑上的一组操作，要么都执行，要么都不执行。

#### **事物的特性（ACID）**

- **原子性：** 事务是最小的执行单位，不允许分割。事务的原子性确保动作要么全部完成，要么完全不起作用；
- **一致性：** 执行事务前后，数据保持一致；
- **隔离性：** 并发访问数据库时，一个用户的事物不被其他事务所干扰也就是说多个事务并发执行时，一个事务的执行不应影响其他事务的执行；
- **持久性:** 一个事务被提交之后。它对数据库中数据的改变是持久的，即使数据库发生故障也不应该对其有任何影响。

### Spring事务管理两种方式

#### 编程式

（1）编程式事务管理对基于 POJO 的应用来说是唯一选择。我们需要在代码中调用beginTransaction()、commit()、rollback()等事务管理相关的方法，这就是编程式事务管理。

#### 声明式

##### xml方式

xml

```xml
<!-- 事务管理器 -->
<bean id="myTracnsactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
	<property name="dataSource" ref="dataSource"></property>
</bean>

<!-- 事务的增强 -->
<tx:advice id="txAdvice" transaction-manager="myTracnsactionManager">
		<tx:attributes>
			<!-- 为连接点指定事务属性 -->
            <!-- name：方法名,事务的增强 -->
			<tx:method name="add*" isolation="DEFAULT" propagation="REQUIRED"/>
			<tx:method name="buyStock" isolation="DEFAULT" propagation="REQUIRED" rollback-for="BuyStockException"/>
		</tx:attributes>
	</tx:advice>

<!-- 配置切面 -->
<aop:config>
		<!-- 切入点配置 -->
		<aop:pointcut expression="execution(* *..service.*.*(..))" id="pointcut1"/>
    	<!-- 切面（增强→切入点） -->
		<aop:advisor advice-ref="txAdvice" pointcut-ref="pointcut1"/>
	</aop:config>
```


##### 注解方式


​	xml

```xml
<!-- 事务管理器 -->
	<bean id="myTracnsactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"></property>
	</bean>

<!-- 启用事务注解 -->
<tx:annotation-driven transaction-manager="myTracnsactionManager"/>
```
加注解(类或者方法上；可以有参数设置隔离级别)

~~~java
@Transactional 
~~~



### Spring事务管理接口介绍

#### Spring事务管理接口

- **PlatformTransactionManager：** （平台）事务管理器
- **TransactionDefinition：** 事务定义信息(事务隔离级别、传播行为、超时、只读、回滚规则)
- **TransactionStatus：** 事务运行状态

> **所谓事务管理，其实就是“按照给定的事务规则来执行提交或者回滚操作”。**

#### PlatformTransactionManager接口介绍

**Spring并不直接管理事务，而是提供了多种事务管理器** ，他们将事务管理的职责委托给Hibernate或者JTA等持久化机制所提供的相关平台框架的事务来实现。 Spring事务管理器的接口是： **org.springframework.transaction.PlatformTransactionManager** ，通过这个接口，Spring为各个平台如JDBC、Hibernate等都提供了对应的事务管理器，但是具体的实现就是各个平台自己的事情了。

**PlatformTransactionManager接口代码如下：**

> PlatformTransactionManager接口中定义了三个方法：

~~~java
Public interface PlatformTransactionManager()...{  
    // Return a currently active transaction or create a new one, according to the specified propagation behavior（根据指定的传播行为，返回当前活动的事务或创建一个新事务。）
    TransactionStatus getTransaction(TransactionDefinition definition) throws TransactionException; 
    // Commit the given transaction, with regard to its status（使用事务目前的状态提交事务）
    Void commit(TransactionStatus status) throws TransactionException;  
    // Perform a rollback of the given transaction（对执行的事务进行回滚）
    Void rollback(TransactionStatus status) throws TransactionException;  
    } 

~~~

Spring中PlatformTransactionManager根据不同持久层框架所对应的接口实现类

> 真正管理事务的对象：
> 1）org.springframework.jdbc.datasource.DataSourceTransactionManager 使用 Spring JDBC 或 iBatis 进行持久化数据时使用
> 2）org.springframework.orm.hibernate5.HibernateTransactionManager 使用 Hibernate 版本进行持久化数据时使用









## 注解总结

### IOC：

#### 创建对象



> ```java
> @Component(value="叫啥") //value可以不写 //相当于xml中加 <bean id="叫啥" class=""></bean>
> 	@Controller	——	web层
> 	@Service	——  业务层
> 	@Repository ——  持久层
> ```

> ~~~java
> @Scope(value="prototype")//多实例
> 	singleton //默认单实例-饿汉式
> 	request
>     session
>     global session
> ~~~

#### 属性注入

> @AutoWired     --自动注入，且不需要再写set方法
>
> ​	通过类(UserDao)找，跟id没关系

> @Qualifier(value = "userDao")			需要和@AutoWired  一起使用
>



> @Value(“   ”) 注入属性





### 新注解





数据库连接池：

~~~java
@Configuration 配置类
@PropertySource("classpath:jdbc.properties")
public class JdbcConfig{

	@Value("${jdbc.url}")
    String url;
    ...

	@Bean
    Public DataSource dataSource(){
        DruidDataSource dataSource = new D..();
        ..
        dataSouce.setUrl(url);....
        return dataSource
    }

}
~~~



@ConfigurationProperties(prefix=“jdbc“)



### 集成Junit





### AOP

​			xml开启aop自动

1.增强类+两个注解

> @Aspect  		//切面——在增强类上
>
> @Before(表达式)    //——增强上，表达式写在哪增强 



2.补充：相同切入点抽取（公共表达式）

​	@Pointcut(value = "表达式")









联系我：shentianyu18@163.com









  


