---
layout: post
title:  "摩尔投票：求众数（n/2；n/3）"
date:   2020/06/01 21点20分       
categories: me
tags: Java
excerpt: 从求众数学习摩尔投票方法
mathjax: true
author: Sky

---

* content
{:toc}


# 回溯算法学习

## [扒一扒回溯算法的裤子](https://leetcode-cn.com/problems/permutations/solution/hui-su-suan-fa-xiang-jie-by-labuladong-2/)

解决一个回溯问题，实际上就是一个决策树的遍历过程。你只需要思考 3 个问题：

1、路径：也就是已经做出的选择。

2、选择列表：也就是你当前可以做的选择。

3、结束条件：也就是到达决策树底层，无法再做选择的条件。



~~~python
result = []
def backtrack(路径, 选择列表):
    if 满足结束条件:
        result.add(路径)
        return
    
    for 选择 in 选择列表:
        做选择
        backtrack(路径, 选择列表)
        撤销选择

~~~



## [46. 全排列](https://leetcode-cn.com/problems/permutations/)



~~~java
List<List<Integer>> res = new LinkedList<>();

/* 主函数，输入一组不重复的数字，返回它们的全排列 */
List<List<Integer>> permute(int[] nums) {
    // 记录「路径」
    LinkedList<Integer> track = new LinkedList<>();
    backtrack(nums, track);
    return res;
}

// 路径：记录在 track 中
// 选择列表：nums 中不存在于 track 的那些元素
// 结束条件：nums 中的元素全都在 track 中出现
void backtrack(int[] nums, LinkedList<Integer> track) {
    // 触发结束条件
    if (track.size() == nums.length) {
        res.add(new LinkedList(track));//新建对象复制一份
        return;
    }
    
    for (int i = 0; i < nums.length; i++) {
        // 排除不合法的选择
        if (track.contains(nums[i]))
            continue;
        // 做选择
        track.add(nums[i]);
        // 进入下一层决策树
        backtrack(nums, track);
        // 取消选择
        track.removeLast();
    }
}

~~~

注意点：

- 新建对象复制一份，如果使用track，存入的是地址，递归完成过后会变空

  结果会变成： [ [], [], [], [], [], [] ]

~~~java
if (track.size() == nums.length) {
        res.add(new LinkedList(track));
      //res.add(track);
        return;
    }
~~~



